#include <stdio.h>
#include <stdlib.h>
typedef struct node{
    char data;
    struct node *lchild;
    struct node *rchild;
}Node,*BiTree;

typedef struct{
    BiTree buf[1000]; //缓冲区，存放类型为指针
    int size;
    void init(){ //初始化
        size=0;
    }
    void push(BiTree x){  //入栈
        buf[size++]=x;
    }
    BiTree pop(){ //出栈
        return buf[--size];
    }
    int empty(){ //判断栈空
        return size==0;
    }
}Stack;


BiTree create(char x){ //创建一个二叉树的结点，结点内容为x，并返回它的指针
    BiTree ret=(BiTree)malloc(sizeof(Node));
    ret->lchild=NULL;
    ret->rchild=NULL;
    ret->data=x;
    return ret;
}


void PreCreate(BiTree &root){ //先序遍历构建一棵二叉树
    char c;
    scanf("%c",&c);
    if(c=='#') root=NULL;
    else{
        root=create(c);
        PreCreate(root->lchild);
        PreCreate(root->rchild);
    }
}


void PreOrderTraver1(BiTree rt){ //通过递归的方法来中序遍历二叉树
    if(rt==NULL) return ;
    PreOrderTraver1(rt->lchild);
    printf("%c",rt->data);
    PreOrderTraver1(rt->rchild);
}


int PreOrderTraver2(BiTree root){ //通过非递归的方法来中序遍历二叉树并返回叶子节点的数量
    int ret=0;
    Stack s;
    s.init(); //开一个栈辅助用
    BiTree cur=root;
    while(cur!=NULL||s.empty()==false){
        while(cur->lchild!=NULL){
            s.push(cur);
            cur=cur->lchild;
        }
        if(cur!=NULL){
            printf("%c",cur->data);
            if(cur->lchild==NULL&&cur->rchild==NULL) ++ret;
        }
        if(s.empty()==false){
            cur=s.pop();
            printf("%c",cur->data);
            if(cur->lchild==NULL&&cur->rchild==NULL) ++ret;
            cur=cur->rchild;
        }
        else{
            cur=NULL;
        }
    }
    return ret;
}



int main(){
    BiTree root=NULL; //二叉树的根
    printf("请输入字符序列，通过先序遍历创建二叉树（#表示空）\n");
    PreCreate(root);  //先序遍历构建二叉树
    printf("通过递归的方法中序遍历:");
    PreOrderTraver1(root); //采用递归的形式中序遍历二叉链表
    puts(""); //换行
    printf("通过非递归的方法中序遍历:");
    int nums=PreOrderTraver2(root); //采用非递归的形式中序遍历二叉链表
    puts(""); //换行
    printf("该二叉树的叶子节点数为:");
    printf("%d\n",nums);
    return 0;
}

/*

ABD##EF##G##CH###
*/











